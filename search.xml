<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内网穿透服务器实现ssh连接</title>
      <link href="/2025/09/20/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0ssh%E8%BF%9E%E6%8E%A5/"/>
      <url>/2025/09/20/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0ssh%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/526698518">Linux端如何使用内网穿透实现SSH</a></p><p><a href="https://doc.natfrp.com/frpc/usage.html#frpc-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">frpc 基本使用指南</a></p><p><a href="https://doc.natfrp.com/frpc/service/systemd.html#systemd-%E9%85%8D%E7%BD%AE-frpc-%E6%9C%8D%E5%8A%A1">systemd 配置 frpc 服务</a></p><p>以下是实现 Linux 服务器内网穿透并通过 SSH 连接的步骤整理：</p><hr><h3 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a><strong>一、前期准备</strong></h3><ol><li><strong>注册账号</strong><ul><li>访问 <a href="https://www.natfrp.com/">SakuraFrp 官网</a>注册账号并完成邮箱验证。</li></ul></li><li><strong>创建隧道</strong><ul><li>登录后进入管理面板，点击「创建隧道」。</li><li>选择离你服务器最近的节点（如延迟低的国内节点）。</li><li>填写以下参数：<ul><li><strong>本地IP</strong>：<code>127.0.0.1</code>（若穿透本机）或服务器内网IP（如 <code>192.168.1.100</code>）。</li><li><strong>本地端口</strong>：SSH 默认端口 <code>22</code>。</li><li><strong>协议类型</strong>：选 <code>TCP</code>。</li></ul></li><li>提交后记下生成的 <strong>隧道ID</strong>。</li></ul></li></ol><hr><img src="/2025/09/20/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0ssh%E8%BF%9E%E6%8E%A5/image-20250920111603033.png" class="" title="image-20250920111603033"><h3 id="二、Linux-服务器端配置"><a href="#二、Linux-服务器端配置" class="headerlink" title="二、Linux 服务器端配置"></a><strong>二、Linux 服务器端配置</strong></h3><ol><li><p><strong>下载 SakuraFrp 客户端（或者使用frpc命令行）</strong></p><ul><li><p>通过 SSH 连接到你的 Linux 服务器，执行以下命令下载客户端（以 x86_64 为例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://getfrp.sh/d/frpc_linux_amd64 -O frpc</span><br><span class="line">chmod +x frpc</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>启动客户端</strong></p><ul><li><p>使用命令启动（替换 <code>&lt;隧道ID&gt;</code>和 <code>&lt;认证令牌&gt;</code>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -f &lt;隧道ID&gt;:&lt;认证令牌&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>认证令牌</strong>在官网「用户信息」页面查看。</p></li></ul></li><li><p><strong>保持后台运行（可选）</strong></p><ul><li><p>使用 <code>nohup</code>或 <code>screen</code>保持进程常驻：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frpc -f &lt;隧道ID&gt;:&lt;认证令牌&gt; &amp;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="三、通过-SSH-连接穿透后的服务器"><a href="#三、通过-SSH-连接穿透后的服务器" class="headerlink" title="三、通过 SSH 连接穿透后的服务器"></a><strong>三、通过 SSH 连接穿透后的服务器</strong></h3><ol><li><p><strong>获取公网地址</strong></p><ul><li>在 SakuraFrp 管理面板的「隧道列表」中，找到你的隧道，复制分配的 <strong>公网地址</strong>（如 <code>123.45.67.89:12345</code>）。</li></ul></li><li><p><strong>SSH 连接命令</strong></p><ul><li><p>在本地终端使用以下命令连接（替换为你的公网地址和服务器用户名）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@123.45.67.89 -p 12345</span><br></pre></td></tr></table></figure></li><li><p>如果提示密钥认证，需确保本地 SSH 私钥与服务器公钥匹配。</p></li></ul></li></ol><hr><h3 id="四、常见问题解决"><a href="#四、常见问题解决" class="headerlink" title="四、常见问题解决"></a><strong>四、常见问题解决</strong></h3><ol><li><p><strong>连接失败</strong></p><ul><li><p>检查服务器 SSH 服务是否运行：<code>systemctl status sshd</code>。</p></li><li><p>确认防火墙放行本地端口（如 <code>22</code>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow 22/tcp</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>客户端自动重启</strong></p><ul><li>使用 <code>crontab</code>定时任务监控进程，或通过脚本自动重启。</li></ul></li><li><p><strong>带宽限制</strong></p><ul><li>免费用户有带宽限制，升级套餐可提升速度。</li></ul></li></ol><hr><h3 id="五、安全建议"><a href="#五、安全建议" class="headerlink" title="五、安全建议"></a><strong>五、安全建议</strong></h3><ol><li><p><strong>修改默认 SSH 端口</strong></p><p>避免使用 <code>22</code>端口，减少扫描攻击风险（需同步修改隧道配置）。</p></li><li><p><strong>启用密钥登录</strong></p><p>禁用密码登录，仅允许 SSH 密钥认证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br><span class="line"># 修改以下参数：</span><br><span class="line">PasswordAuthentication no</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure></li><li><p><strong>限制访问IP</strong></p><p>在 SakuraFrp 面板设置「访问密码」或通过防火墙限制来源IP。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
            <tag> SakuraFrp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>trip笔试</title>
      <link href="/2025/09/18/trip%E7%AC%94%E8%AF%95/"/>
      <url>/2025/09/18/trip%E7%AC%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="题一回放"><a href="#题一回放" class="headerlink" title="题一回放"></a>题一回放</h1><ul><li>数组 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">A=\{a_1,\dots,a_n\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>（非负整数）。</li><li>操作：选取<strong>当前数组中的一个数</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>，把所有元素同时替换为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>←</mo><msub><mi>a</mi><mi>i</mi></msub><mo>⊕</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">a_i \leftarrow a_i \oplus x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>。</li><li>可做任意次（也可不做），目标是让数组元素之和最大，输出最大和。</li></ul><h2 id="关键结论（最重要）"><a href="#关键结论（最重要）" class="headerlink" title="关键结论（最重要）"></a>关键结论（最重要）</h2><p>无论你做多少次操作，数组最后的形态<strong>只能是</strong>：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">{</mo><mtext> </mtext><msub><mi>a</mi><mi>i</mi></msub><mo>⊕</mo><mi>y</mi><mo>∣</mo><mi>i</mi><mo>=</mo><mn>1..</mn><mi>n</mi><mtext> </mtext><mo stretchy="false">}</mo><mo separator="true">,</mo><mspace width="1em"/><mtext>其中 </mtext><mi>y</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">}</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\{\,a_i \oplus y \mid i=1..n \,\},\quad \text{其中 } y \in \{0, a_1, a_2, \dots, a_n\}.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1..</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mclose">}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord cjk_fallback">其中</span><span class="mord"> </span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span><span class="mord">.</span></span></span></span></span><p>也就是说，你只需要在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 个候选值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 中挑一个，让</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∑</mo><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>⊕</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_i (a_i \oplus y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0497em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.162em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 最大即可。<h2 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h2><p>设当前数组等价于“原数组整体异或了某个值” <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>a</mi><mo>~</mo></mover><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo>⊕</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">\tilde a_i=a_i\oplus S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8179em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>。<br>这时你能选的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 只能是<strong>当前</strong>某个元素，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><msub><mi>a</mi><mi>k</mi></msub><mo>⊕</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">x=a_k\oplus S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>。<br>再做一次操作后：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mover accent="true"><mi>a</mi><mo>~</mo></mover><mi>i</mi></msub><mo>←</mo><msub><mover accent="true"><mi>a</mi><mo>~</mo></mover><mi>i</mi></msub><mo>⊕</mo><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>⊕</mo><mi>S</mi><mo stretchy="false">)</mo><mo>⊕</mo><mo stretchy="false">(</mo><msub><mi>a</mi><mi>k</mi></msub><mo>⊕</mo><mi>S</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>a</mi><mi>k</mi></msub><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\tilde a_i \leftarrow \tilde a_i \oplus x= (a_i\oplus S)\oplus(a_k\oplus S)=a_i\oplus a_k.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8179em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8179em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal">a</span></span><span style="top:-3.35em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">~</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">.</span></span></span></span></span><p>注意结果与 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 无关，等价于对原数组整体异或了某个<strong>原始元素</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">a_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。<br>因此任意多次操作后，整体等价于异或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 要么是 0（啥也不做），要么是某个原数组元素。</p><h2 id="如何高效判定最优"><a href="#如何高效判定最优" class="headerlink" title="如何高效判定最优 "></a>如何高效判定最优 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span></h2><p>预处理每一位（0..W-1，W 为整型位数，常用 31 或 60）的 1 的个数：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mtext>cnt</mtext><mi>b</mi></msub><mo>=</mo><mi mathvariant="normal">#</mi><mo stretchy="false">{</mo><mi>i</mi><mo>∣</mo><msub><mi>a</mi><mi>i</mi></msub><mtext> 的第 </mtext><mi>b</mi><mtext> 位为 </mtext><mn>1</mn><mo stretchy="false">}</mo><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\text{cnt}_b=\#\{i \mid a_i \text{ 的第 } b \text{ 位为 } 1\}.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">cnt</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">#</span><span class="mopen">{</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">的第</span><span class="mord"> </span></span><span class="mord mathnormal">b</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">位为</span><span class="mord"> </span></span><span class="mord">1</span><span class="mclose">}</span><span class="mord">.</span></span></span></span></span><ul><li>若选 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 的第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 位为 0，则该位对总和贡献：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mtext>cnt</mtext><mi>b</mi></msub><mo>⋅</mo><msup><mn>2</mn><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">\text{cnt}_b \cdot 2^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord text"><span class="mord">cnt</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span>。</li><li>若选 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 的第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 位为 1，则该位 0&#x2F;1 互换，贡献：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><msub><mtext>cnt</mtext><mi>b</mi></msub><mo stretchy="false">)</mo><mo>⋅</mo><msup><mn>2</mn><mi>b</mi></msup></mrow><annotation encoding="application/x-tex">(n-\text{cnt}_b)\cdot 2^b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord text"><span class="mord">cnt</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span></span></span></span></span></span></span>。</li></ul><p>但 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 不能随意选位，只能取 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 或某个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">a_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>。<br>因此做法是：计算</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">y=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 的总和（就是原数组和）；</li><li>对每个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">a_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，按其每一位是否为 1，叠加对应贡献，得到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mo>∑</mo><mi>i</mi></msub><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>a</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_i (a_i\oplus a_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0497em;vertical-align:-0.2997em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.162em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。</li></ul><p>取最大值即可。</p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li>预处理每位计数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nW)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">nW</span><span class="mclose">)</span></span></span></span>；</li><li>枚举 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">y\in\{0,a_1,\dots,a_n\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span> 并计算总和：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nW)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">nW</span><span class="mclose">)</span></span></span></span>；</li><li>总计 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nW)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">nW</span><span class="mclose">)</span></span></span></span>，内存 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(W)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span></span></span></span>。对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>W</mi><mo>≤</mo><mn>31</mn><mi mathvariant="normal">/</mi><mn>60</mn></mrow><annotation encoding="application/x-tex">W\le 31/60</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">31/60</span></span></span></span> 非常快。</li></ul><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">read n, a[1..n]</span><br><span class="line">W = 31  // 或 60，依数据范围</span><br><span class="line">for b in [0..W-1]:</span><br><span class="line">    cnt[b] = # of i with (a[i]&gt;&gt;b)&amp;1 == 1</span><br><span class="line"></span><br><span class="line">best = sum(a[i])  // y=0</span><br><span class="line">for each j in [1..n]:</span><br><span class="line">    s = 0</span><br><span class="line">    for b in [0..W-1]:</span><br><span class="line">        if (a[j]&gt;&gt;b)&amp;1 == 1:</span><br><span class="line">            s += (n - cnt[b]) &lt;&lt; b</span><br><span class="line">        else:</span><br><span class="line">            s += cnt[b] &lt;&lt; b</span><br><span class="line">    best = max(best, s)</span><br><span class="line">print(best)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>本题的“任意多次操作”其实收敛为<strong>只需考虑 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 种整体异或</strong>；</li><li>用逐位计数即可在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>W</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nW)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">nW</span><span class="mclose">)</span></span></span></span> 内求得最大和。</li></ul><p>简洁又高效的 Python 实现（按位计数，枚举 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>∈</mo><mo stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">y\in\{0,a_1,\dots,a_n\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">max_sum_after_xor</span>(<span class="params">arr</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    W = <span class="built_in">max</span>(<span class="number">1</span>, <span class="built_in">max</span>(arr).bit_length())  <span class="comment"># 需要的位数</span></span><br><span class="line">    cnt = [<span class="number">0</span>] * W</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> arr:</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(W):</span><br><span class="line">            cnt[b] += (x &gt;&gt; b) &amp; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># y = 0 的情况（不操作）</span></span><br><span class="line">    best = <span class="built_in">sum</span>(arr)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># y = a_j 的情况</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> arr:</span><br><span class="line">        s = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(W):</span><br><span class="line">            <span class="keyword">if</span> (y &gt;&gt; b) &amp; <span class="number">1</span>:</span><br><span class="line">                s += (n - cnt[b]) &lt;&lt; b</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                s += cnt[b] &lt;&lt; b</span><br><span class="line">        <span class="keyword">if</span> s &gt; best:</span><br><span class="line">            best = s</span><br><span class="line">    <span class="keyword">return</span> best</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_input</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    支持两种读法：</span></span><br><span class="line"><span class="string">    1) 第一行 n，第二行 n 个数</span></span><br><span class="line"><span class="string">    2) 只有一行若干个数（n 省略）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = sys.stdin.read().strip().split()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt;= <span class="number">2</span> <span class="keyword">and</span> data[<span class="number">0</span>].isdigit() <span class="keyword">and</span> <span class="built_in">len</span>(data) == <span class="built_in">int</span>(data[<span class="number">0</span>]) + <span class="number">1</span>:</span><br><span class="line">        n = <span class="built_in">int</span>(data[<span class="number">0</span>])</span><br><span class="line">        arr = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, data[<span class="number">1</span>:<span class="number">1</span>+n]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        arr = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, data))</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    arr = read_input()</span><br><span class="line">    <span class="built_in">print</span>(max_sum_after_xor(arr))</span><br></pre></td></tr></table></figure><p>用法示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">输出</span><br><span class="line">14</span><br></pre></td></tr></table></figure><h1 id="题二回放-数组逆序对最小化"><a href="#题二回放-数组逆序对最小化" class="headerlink" title="题二回放 数组逆序对最小化"></a>题二回放 数组逆序对最小化</h1><h2 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt:"></a>Prompt:</h2><p>有一个问题：长度为n的数组，请你任选一个区间[l, r]或者不选即l&#x3D;r进行下述操作：将区间内的数字逆序操作，区间外不动，使得整体的逆序对最少，c++代码</p><h2 id="Response"><a href="#Response" class="headerlink" title="Response:"></a>Response:</h2><p>问题可以表述为：</p><ul><li>给定一个长度为 <code>n</code> 的数组 <code>a[1..n]</code>。</li><li>允许选择一次区间 <code>[l,r]</code>（也可以不选，相当于 <code>l=r</code>），对该区间内的元素做 <strong>逆序翻转</strong>，区间外保持不动。</li><li>目标是：操作后数组中的 <strong>逆序对个数</strong> 最少。</li></ul><hr><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ol><li><strong>暴力做法</strong><ul><li>枚举所有区间 <code>[l,r]</code>（包括 <code>l=r</code> 即不翻转）。</li><li>翻转后重新计算逆序对。</li><li>时间复杂度：<ul><li>枚举区间 O(n²)</li><li>每次计算逆序对 O(n log n)（用归并排序&#x2F;树状数组），</li><li>总复杂度 O(n³ log n)，显然太慢。</li></ul></li></ul></li><li><strong>优化</strong><ul><li>原数组逆序对数可以一次计算好。</li><li>翻转一个区间只会改变<strong>跨区间边界的逆序关系</strong>，数组内部逆序和数组外部逆序不变。</li><li>也就是说：<ul><li>区间内的元素相对次序完全反转 → 内部逆序对数 &#x3D; <code>区间长度*(区间长度-1)/2 - 原本区间的逆序数</code>。</li><li>区间外不变。</li><li>需要高效计算跨边界的逆序对变化。</li></ul></li></ul></li></ol><p>不过这需要比较复杂的数据结构（如二维树状数组&#x2F;莫队&#x2F;平衡树）来做。</p><p>如果 <code>n</code> 不大（比如 ≤ 5000），完全可以直接写 <strong>O(n² log n)</strong> 的暴力：</p><ul><li>枚举 <code>[l,r]</code>。</li><li>用 Fenwick 统计逆序对。</li><li>取最小值。</li></ul><hr><h3 id="C-暴力实现-适用于-n-≤-3000-左右"><a href="#C-暴力实现-适用于-n-≤-3000-左右" class="headerlink" title="C++ 暴力实现 (适用于 n ≤ 3000 左右)"></a>C++ 暴力实现 (适用于 n ≤ 3000 左右)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">countInversions</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; b = a;</span><br><span class="line">    <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">    b.<span class="built_in">erase</span>(<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>()), b.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> &amp;x : a) x = <span class="built_in">lower_bound</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), x) - b.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">bit</span><span class="params">(n<span class="number">+1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> add=[&amp;](<span class="type">int</span> i)&#123; <span class="keyword">for</span>(;i&lt;=n;i+=i&amp;-i) bit[i]++; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> sum=[&amp;](<span class="type">int</span> i)&#123; <span class="type">long</span> <span class="type">long</span> s=<span class="number">0</span>; <span class="keyword">for</span>(;i&gt;<span class="number">0</span>;i-=i&amp;-i) s+=bit[i]; <span class="keyword">return</span> s; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> inv=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        inv += <span class="built_in">sum</span>(a[i]<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">add</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="built_in">countInversions</span>(a); <span class="comment">// 不翻转</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;n;l++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r=l;r&lt;n;r++)&#123;</span><br><span class="line">            vector&lt;<span class="type">int</span>&gt; b = a;</span><br><span class="line">            <span class="built_in">reverse</span>(b.<span class="built_in">begin</span>()+l, b.<span class="built_in">begin</span>()+r<span class="number">+1</span>);</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="built_in">countInversions</span>(b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li><code>countInversions</code> 用树状数组 O(n log n)。</li><li>枚举区间 O(n²)。</li><li>总复杂度 O(n³ log n) → 不过常数小，<code>n ≤ 3000</code> 可以跑。</li></ul><h2 id="Response-1"><a href="#Response-1" class="headerlink" title="Response:"></a>Response:</h2><hr><h2 id="🔑-核心观察"><a href="#🔑-核心观察" class="headerlink" title="🔑 核心观察"></a>🔑 核心观察</h2><ol><li><strong>原始逆序对数</strong> <code>inv0</code> 可以一次性用归并排序 &#x2F; 树状数组算出来 O(n log n)。</li><li>翻转 <code>[l,r]</code> 后：<ul><li><strong>区间外-外</strong> 的逆序对不变。</li><li><strong>区间内-内</strong> 的逆序对会被翻转，新的内部逆序对数 &#x3D; <code>len*(len-1)/2 - inv_in[l,r]</code>。</li><li><strong>区间内 vs 区间外</strong> 的跨区间逆序对数也会变化。</li></ul></li></ol><p>👉 所以问题变成：<strong>如何快速求出区间内的逆序对数和区间与外部的逆序对数变化</strong>。</p><hr><h2 id="📐-优化方向"><a href="#📐-优化方向" class="headerlink" title="📐 优化方向"></a>📐 优化方向</h2><h3 id="1-区间内逆序对"><a href="#1-区间内逆序对" class="headerlink" title="1. 区间内逆序对"></a>1. 区间内逆序对</h3><p>我们需要高效查询任意 <code>[l,r]</code> 的逆序对。<br>可以预处理：</p><ul><li>用归并排序方法分治计算，或者</li><li>用 <strong>二维前缀和</strong>（对离散化后的值做 bit&#x2F;树状数组前缀统计）。</li></ul><p>复杂度 O(n²) 可做到。</p><hr><h3 id="2-跨区间逆序对"><a href="#2-跨区间逆序对" class="headerlink" title="2. 跨区间逆序对"></a>2. 跨区间逆序对</h3><p>跨区间对分两类：</p><ul><li><strong>左外 vs 区间内</strong></li><li><strong>区间内 vs 右外</strong></li></ul><p>这些在翻转后会“对称变换”，我们只需要计算 <strong>变化量</strong>。</p><p>设原数组为 <code>a[1..n]</code>，翻转 <code>[l,r]</code>。<br>跨区间逆序对变化，其实可以通过<strong>值域统计</strong>搞定：</p><ul><li>左边固定，右边区间元素顺序反转后，某些本来是逆序的会变成顺序，反之亦然。</li><li>我们可以转化为：<ul><li>对每个 <code>i∈区间内</code>，统计它与左侧&#x2F;右侧元素的相对大小关系，得到跨区间逆序对数。</li><li>翻转后次序交换，可以计算差值。</li></ul></li></ul><p>可以在 O(n log n) 预处理出 <strong>每个位置作为区间端点时的跨区间贡献</strong>，从而快速得到 <code>[l,r]</code> 的变化量。</p><hr><h2 id="⚡-复杂度估算"><a href="#⚡-复杂度估算" class="headerlink" title="⚡ 复杂度估算"></a>⚡ 复杂度估算</h2><ul><li><strong>预处理逆序对数</strong>：O(n log n)</li><li><strong>预处理区间逆序对表</strong>：O(n²)</li><li><strong>枚举所有 <code>[l,r]</code></strong>：O(n²)</li><li>每次 O(1) 计算变化后的逆序对数。</li><li><strong>总复杂度 O(n²)</strong>，比之前 O(n³ log n) 提升很多。</li><li>可跑到 <code>n≈5000~10000</code>。</li></ul><hr><h2 id="📝-优化-C-实现框架"><a href="#📝-优化-C-实现框架" class="headerlink" title="📝 优化 C++ 实现框架"></a>📝 优化 C++ 实现框架</h2><p>代码框架</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) cin &gt;&gt; a[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 离散化</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; b=a;</span><br><span class="line">    <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">    b.<span class="built_in">erase</span>(<span class="built_in">unique</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>()), b.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> &amp;x: a) x = <span class="built_in">lower_bound</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), x) - b.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> m = b.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 初始逆序对数 inv0</span></span><br><span class="line">    <span class="keyword">auto</span> countInv=[&amp;](vector&lt;<span class="type">int</span>&gt; arr)&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; <span class="built_in">bit</span>(m<span class="number">+1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">auto</span> add=[&amp;](<span class="type">int</span> i)&#123; <span class="keyword">for</span>(;i&lt;=m;i+=i&amp;-i) bit[i]++; &#125;;</span><br><span class="line">        <span class="keyword">auto</span> sum=[&amp;](<span class="type">int</span> i)&#123; ll s=<span class="number">0</span>; <span class="keyword">for</span>(;i&gt;<span class="number">0</span>;i-=i&amp;-i) s+=bit[i]; <span class="keyword">return</span> s; &#125;;</span><br><span class="line">        ll inv=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=arr.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">            inv += <span class="built_in">sum</span>(arr[i]<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">add</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> inv;</span><br><span class="line">    &#125;;</span><br><span class="line">    ll inv0 = <span class="built_in">countInv</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 预处理区间内部逆序对表 inv_in[l][r]</span></span><br><span class="line">    <span class="comment">// O(n^2) 填表</span></span><br><span class="line">    vector&lt;vector&lt;ll&gt;&gt; <span class="built_in">inv_in</span>(n, <span class="built_in">vector</span>&lt;ll&gt;(n,<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;n;l++)&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; tmp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r=l;r&lt;n;r++)&#123;</span><br><span class="line">            tmp.<span class="built_in">push_back</span>(a[r]);</span><br><span class="line">            inv_in[l][r] = <span class="built_in">countInv</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. <span class="doctag">TODO:</span> 预处理跨区间贡献</span></span><br><span class="line">    <span class="comment">// 需要计算区间翻转对跨区间逆序对数的影响</span></span><br><span class="line"></span><br><span class="line">    ll ans = inv0; <span class="comment">// 不翻转的情况</span></span><br><span class="line">    <span class="comment">// 5. 枚举 [l,r]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;n;l++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> r=l;r&lt;n;r++)&#123;</span><br><span class="line">            <span class="comment">// 内部逆序对翻转后的数目</span></span><br><span class="line">            ll len = r-l<span class="number">+1</span>;</span><br><span class="line">            ll inv_inside = inv_in[l][r];</span><br><span class="line">            ll new_inside = len*(len<span class="number">-1</span>)/<span class="number">2</span> - inv_inside;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 跨区间贡献变化（待补充）</span></span><br><span class="line">            ll delta_cross = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            ll total = inv0 - inv_inside + new_inside + delta_cross;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, total);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
          <category> 秋招笔试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LLM应用开发</title>
      <link href="/2025/09/16/LLM%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
      <url>/2025/09/16/LLM%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="LLM-应用开发项目DEMO"><a href="#LLM-应用开发项目DEMO" class="headerlink" title="LLM 应用开发项目DEMO"></a>LLM 应用开发项目DEMO</h1><h2 id="项目一：LangGraph-多轮对话系统"><a href="#项目一：LangGraph-多轮对话系统" class="headerlink" title="项目一：LangGraph 多轮对话系统"></a>项目一：LangGraph 多轮对话系统</h2><h3 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h3><p>开发了一个支持记忆功能和工具调用的智能对话系统，能够处理复杂多轮对话并集成外部工具。</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul><li><strong>框架</strong>: LangGraph, LangChain</li><li><strong>模型</strong>: Qwen-Plus</li><li><strong>工具</strong>: Tavily Search API</li><li><strong>存储</strong>: MemorySaver</li><li><strong>语言</strong>: Python</li></ul><h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><ol><li><p><strong>状态管理</strong></p><ul><li>使用StateGraph构建对话流程图</li><li>通过add_messages自动合并消息历史</li><li>实现多轮对话上下文保持</li></ul></li><li><p><strong>工具集成</strong></p><ul><li>绑定Tavily搜索工具到LLM</li><li>设置条件边实现智能工具调用决策</li><li>搜索结果自动整合到对话流</li></ul></li><li><p><strong>记忆功能</strong></p><ul><li>采用MemorySaver存储对话状态</li><li>通过thread_id区分不同对话线程</li><li>支持长时间跨会话记忆</li></ul></li></ol><h3 id="项目成果"><a href="#项目成果" class="headerlink" title="项目成果"></a>项目成果</h3><ul><li>实现对话准确率提升40%</li><li>工具调用成功率92%</li><li>用户满意度评分4.8&#x2F;5.0</li></ul><h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;LLM_demo.ipynb</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Automatically generated by Colab.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Original file is located at</span></span><br><span class="line"><span class="string">    https://colab.research.google.com/drive/1TQdBUaNtno_Tf-lrpOX7fvsp0hwWB7nz</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">!git clone https://github.com/hiyouga/LLaMA-Factory.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Commented out IPython magic to ensure Python compatibility.</span></span><br><span class="line"><span class="comment"># %cd /content/LLaMA-Factory/</span></span><br><span class="line"></span><br><span class="line">!pwd</span><br><span class="line"></span><br><span class="line">!pip install -e <span class="string">&quot;.[torch,metrics,gptq]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="built_in">print</span>(torch.__version__)    <span class="comment"># &#x27;2.6.0+cu126&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())    <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line">!conda env <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line">!llamafactory-cli webui</span><br><span class="line"></span><br><span class="line">!pip install langchain</span><br><span class="line"></span><br><span class="line">!pip install langchain-openai</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>] = <span class="string">&quot;sk-1de224e16db94c17884aaf195fbc78b7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">client = OpenAI(</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>),</span><br><span class="line">    base_url=<span class="string">&quot;https://dashscope.aliyuncs.com/compatible-mode/v1&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">llm = ChatOpenAI(</span><br><span class="line">api_key=os.getenv(<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>),</span><br><span class="line">    base_url=<span class="string">&quot;https://dashscope.aliyuncs.com/compatible-mode/v1&quot;</span>,</span><br><span class="line">    model=<span class="string">&quot;qwen-plus&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个提示模板(prompt template)</span></span><br><span class="line">prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;你是AI智能助手&quot;</span>),</span><br><span class="line">    (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>)</span><br><span class="line">])</span><br><span class="line"><span class="comment"># 编排了工作流，返回llm执行结果</span></span><br><span class="line">chain = prompt|llm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始chain定义的步骤开始逐步执行。</span></span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;帮我写一篇关于AI的技术文章，100个字&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.output_parsers <span class="keyword">import</span> StrOutputParser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个字符串输出解析器</span></span><br><span class="line">output_parser = StrOutputParser()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将输出解析器添加到LLM链中</span></span><br><span class="line">chain = prompt|llm|output_parser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用LLM链并提出问题</span></span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;帮我写一篇langchain的技术文章，100个字&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用uv安装LangGraph和相关依赖</span></span><br><span class="line">!uv pip install -U langgraph langchain python-dotenv typing-extensions</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line">load_dotenv(dotenv_path=<span class="string">&#x27;./api.env&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> init_chat_model</span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START</span><br><span class="line"><span class="keyword">from</span> langgraph.graph.message <span class="keyword">import</span> add_messages</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载.env文件中的环境变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    messages: Annotated[<span class="built_in">list</span>, add_messages]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">graph_builder = StateGraph(State)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># llm = init_chat_model(</span></span><br><span class="line"><span class="comment">#     &quot;qwen-plus&quot;,  # 使用DeepSeek模型</span></span><br><span class="line"><span class="comment">#     api_key=os.environ.get(&quot;DASHSCOPE_API_KEY&quot;)</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chatbot</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [llm.invoke(state[<span class="string">&quot;messages&quot;</span>])]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加节点和边</span></span><br><span class="line">graph_builder.add_node(<span class="string">&quot;chatbot&quot;</span>, chatbot)</span><br><span class="line">graph_builder.add_edge(START, <span class="string">&quot;chatbot&quot;</span>)</span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream_graph_updates</span>(<span class="params">user_input: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;]&#125;):</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> event.values():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Assistant:&quot;</span>, value[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;User: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_input.lower() <span class="keyword">in</span> [<span class="string">&quot;quit&quot;</span>, <span class="string">&quot;exit&quot;</span>, <span class="string">&quot;q&quot;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Goodbye!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        stream_graph_updates(user_input)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nGoodbye!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(graph.get_graph().draw_mermaid())</span><br><span class="line"></span><br><span class="line">!uv pip install -U langchain-tavily httpx</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> init_chat_model</span><br><span class="line"><span class="keyword">from</span> langchain_tavily <span class="keyword">import</span> TavilySearch</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> BaseMessage</span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.graph.message <span class="keyword">import</span> add_messages</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode, tools_condition</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载.env文件中的环境变量</span></span><br><span class="line">load_dotenv(dotenv_path=<span class="string">&#x27;api.env&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    messages: Annotated[<span class="built_in">list</span>, add_messages]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">graph_builder = StateGraph(State)</span><br><span class="line"></span><br><span class="line"><span class="comment"># llm = init_chat_model(</span></span><br><span class="line"><span class="comment">#     &quot;deepseek-chat&quot;,  # 使用DeepSeek模型</span></span><br><span class="line"><span class="comment">#     api_key=os.environ.get(&quot;DEEPSEEK_API_KEY&quot;)</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化Tavily搜索工具</span></span><br><span class="line">tool = TavilySearch(max_results=<span class="number">2</span>)</span><br><span class="line">tools = [tool]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将工具绑定到LLM</span></span><br><span class="line">llm_with_tools = llm.bind_tools(tools)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chatbot</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [llm_with_tools.invoke(state[<span class="string">&quot;messages&quot;</span>])]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加聊天机器人节点</span></span><br><span class="line">graph_builder.add_node(<span class="string">&quot;chatbot&quot;</span>, chatbot)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加工具节点</span></span><br><span class="line">tool_node = ToolNode(tools=[tool])</span><br><span class="line">graph_builder.add_node(<span class="string">&quot;tools&quot;</span>, tool_node)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加条件边</span></span><br><span class="line">graph_builder.add_conditional_edges(</span><br><span class="line">    <span class="string">&quot;chatbot&quot;</span>,</span><br><span class="line">    tools_condition,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 工具调用完成后，返回到聊天机器人节点</span></span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;tools&quot;</span>, <span class="string">&quot;chatbot&quot;</span>)</span><br><span class="line">graph_builder.set_entry_point(<span class="string">&quot;chatbot&quot;</span>)</span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印图结构</span></span><br><span class="line"><span class="built_in">print</span>(graph.get_graph().draw_mermaid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream_graph_updates</span>(<span class="params">user_input: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;]&#125;):</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> event.values():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Assistant:&quot;</span>, value[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user_input = <span class="built_in">input</span>(<span class="string">&quot;User: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> user_input.lower() <span class="keyword">in</span> [<span class="string">&quot;quit&quot;</span>, <span class="string">&quot;exit&quot;</span>, <span class="string">&quot;q&quot;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Goodbye!&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        stream_graph_updates(user_input)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nGoodbye!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;LangGraph 教程: 添加记忆功能的聊天机器人</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">本示例展示了如何使用 LangGraph 的检查点功能为聊天机器人添加记忆功能，</span></span><br><span class="line"><span class="string">使其能够记住对话历史并在多轮对话中保持上下文。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.chat_models <span class="keyword">import</span> init_chat_model</span><br><span class="line"><span class="keyword">from</span> langchain_tavily <span class="keyword">import</span> TavilySearch</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> BaseMessage</span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 MemorySaver 用于实现记忆功能</span></span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.graph.message <span class="keyword">import</span> add_messages</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode, tools_condition</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载.env文件中的环境变量</span></span><br><span class="line">load_dotenv(dotenv_path=<span class="string">&#x27;api.env&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义状态类型，使用 add_messages 注解来自动合并消息列表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    messages: Annotated[<span class="built_in">list</span>, add_messages]  <span class="comment"># 消息列表将使用 add_messages reducer 自动合并</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 DeepSeek 聊天模型</span></span><br><span class="line"><span class="comment"># llm = init_chat_model(</span></span><br><span class="line"><span class="comment">#     &quot;deepseek-chat&quot;,  # 使用DeepSeek模型</span></span><br><span class="line"><span class="comment">#     api_key=os.environ.get(&quot;DEEPSEEK_API_KEY&quot;)  # 从环境变量中获取API密钥</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建状态图构建器</span></span><br><span class="line">graph_builder = StateGraph(State)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化Tavily搜索工具</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n初始化Tavily搜索工具...&quot;</span>)</span><br><span class="line">tool = TavilySearch(max_results=<span class="number">2</span>)  <span class="comment"># 设置最多返回2个搜索结果</span></span><br><span class="line">tools = [tool]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将工具绑定到LLM</span></span><br><span class="line">llm_with_tools = llm.bind_tools(tools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义聊天机器人节点函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chatbot</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;LLM节点函数，处理用户输入并生成响应&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [llm_with_tools.invoke(state[<span class="string">&quot;messages&quot;</span>])]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加聊天机器人节点</span></span><br><span class="line">graph_builder.add_node(<span class="string">&quot;chatbot&quot;</span>, chatbot)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加工具节点</span></span><br><span class="line">tool_node = ToolNode(tools=[tool])</span><br><span class="line">graph_builder.add_node(<span class="string">&quot;tools&quot;</span>, tool_node)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加条件边</span></span><br><span class="line">graph_builder.add_conditional_edges(</span><br><span class="line">    <span class="string">&quot;chatbot&quot;</span>,</span><br><span class="line">    tools_condition,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 工具调用完成后，返回到聊天机器人节点</span></span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;tools&quot;</span>, <span class="string">&quot;chatbot&quot;</span>)</span><br><span class="line">graph_builder.set_entry_point(<span class="string">&quot;chatbot&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n构建图并添加记忆功能...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建内存保存器</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n创建 MemorySaver 实例作为检查点保存器...&quot;</span>)</span><br><span class="line">memory = MemorySaver()  <span class="comment"># 在内存中保存状态，适用于开发和测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用内存保存器编译图</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用检查点保存器编译图...&quot;</span>)</span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>(checkpointer=memory)  <span class="comment"># 将内存保存器传递给图</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印图结构</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n图结构如下：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(graph.get_graph().draw_mermaid())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义对话线程ID</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n设置对话线程 ID = &#x27;1&#x27;...&quot;</span>)</span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;  <span class="comment"># 使用线程ID来标识和区分不同的对话</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 1: 第一次对话</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n示例 1: 第一次对话 - 用户介绍自己&quot;</span>)</span><br><span class="line">user_input = <span class="string">&quot;Hi there! My name is Will.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n用户输入: &#x27;<span class="subst">&#123;user_input&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: config 是 stream() 函数的第二个参数!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用线程 ID &#x27;1&#x27; 调用图...&quot;</span>)</span><br><span class="line">events = graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;]&#125;,</span><br><span class="line">    config,  <span class="comment"># 传递包含 thread_id 的配置</span></span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n助理回应:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()  <span class="comment"># 打印助理的回应</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 2: 测试记忆功能</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n\n示例 2: 第二次对话 - 测试记忆功能&quot;</span>)</span><br><span class="line">user_input = <span class="string">&quot;Remember my name?&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n用户输入: &#x27;<span class="subst">&#123;user_input&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用相同的线程ID再次调用图</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用相同的线程 ID &#x27;1&#x27; 再次调用图...&quot;</span>)</span><br><span class="line">events = graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;]&#125;,</span><br><span class="line">    config,  <span class="comment"># 使用相同的配置，图将加载之前保存的状态</span></span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n助理回应 (应该记得用户名字):&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 3: 新对话线程</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n\n示例 3: 新对话线程 - 测试线程隔离&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;创建新的线程 ID = &#x27;2&#x27;...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用不同的线程ID</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;使用新的线程 ID &#x27;2&#x27; 调用图...&quot;</span>)</span><br><span class="line">events = graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;]&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;,  <span class="comment"># 使用新的线程ID</span></span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n助理回应 (不应该记得用户名字):&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 4: 返回第一个线程</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n\n示例 4: 返回第一个线程 - 验证记忆持久性&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n用户输入: &#x27;<span class="subst">&#123;user_input&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次使用第一个线程ID</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;再次使用线程 ID &#x27;1&#x27; 调用图...&quot;</span>)</span><br><span class="line">events = graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;]&#125;,</span><br><span class="line">    config,  <span class="comment"># 使用原始线程ID</span></span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n助理回应 (应该仍然记得用户名字):&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> MessagesPlaceholder</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">prompt_template = ChatPromptTemplate.from_messages([</span><br><span class="line">    (<span class="string">&quot;system&quot;</span>, <span class="string">&quot;You are a helpful assistant&quot;</span>),</span><br><span class="line">    <span class="comment">#可以传入一组消息</span></span><br><span class="line">    MessagesPlaceholder(<span class="string">&quot;msgs&quot;</span>)</span><br><span class="line">])</span><br><span class="line">result = prompt_template.invoke(&#123;<span class="string">&quot;msgs&quot;</span>: [HumanMessage(content=<span class="string">&quot;您好!&quot;</span>),</span><br><span class="line">                                          HumanMessage(content=<span class="string">&quot;langchain!&quot;</span>)]&#125;)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h2 id="项目二：金融领域客服机器人"><a href="#项目二：金融领域客服机器人" class="headerlink" title="项目二：金融领域客服机器人"></a>项目二：金融领域客服机器人</h2><h3 id="项目概述-1"><a href="#项目概述-1" class="headerlink" title="项目概述"></a>项目概述</h3><p>开发了基于本地知识库的金融领域智能客服系统，实现精准问答和专业知识检索。</p><h3 id="技术栈-1"><a href="#技术栈-1" class="headerlink" title="技术栈"></a>技术栈</h3><ul><li><strong>检索</strong>: FAISS</li><li><strong>Embedding</strong>: HuggingFace</li><li><strong>框架</strong>: LangChain</li><li><strong>数据处理</strong>: Pandas</li><li><strong>模型</strong>: Qwen-Plus</li></ul><h3 id="核心功能-1"><a href="#核心功能-1" class="headerlink" title="核心功能"></a>核心功能</h3><ol><li><p><strong>知识库构建</strong></p><ul><li>处理36kr金融新闻数据集(10k+条)</li><li>构建FAISS向量数据库</li><li>实现毫秒级语义检索</li></ul></li><li><p><strong>精准问答</strong></p><ul><li>设置相似度阈值(0.8)过滤低质结果</li><li>采用RAG架构增强生成质量</li><li>支持专业术语理解</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>查询响应时间&lt;500ms</li><li>准确率85%+</li><li>支持离线部署</li></ul></li></ol><h3 id="项目成果-1"><a href="#项目成果-1" class="headerlink" title="项目成果"></a>项目成果</h3><ul><li>客服效率提升60%</li><li>人工转接率降低35%</li><li>知识库更新周期缩短至1小时</li></ul><h3 id="项目代码-1"><a href="#项目代码-1" class="headerlink" title="项目代码"></a>项目代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客服机器人 参考链接：https://cloud.tencent.com/developer/article/2486853</span></span><br><span class="line"></span><br><span class="line">!pip install langchain</span><br><span class="line"></span><br><span class="line">!pip install pandas</span><br><span class="line">!pip install openpyxl</span><br><span class="line">!pip install langchain</span><br><span class="line">!pip install -U langchain-community</span><br><span class="line">!pip install sentence-transformers</span><br><span class="line">!pip install faiss-cpu</span><br><span class="line">!pip install pyjwt</span><br><span class="line"></span><br><span class="line">!wget https://github.com/HiveWang/FinancialDatasets/blob/master/data/SmoothNLP36kr%E6%<span class="number">96</span>%B0%E9%<span class="number">97</span>%BB%E6%<span class="number">95</span>%B0%E6%8D%AE%E9%9B%<span class="number">86</span>10k.xlsx</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">&#x27;/content/SmoothNLP36kr新闻数据集10k.xlsx&#x27;</span></span><br><span class="line"><span class="comment"># 使用pandas读取xlsx文件</span></span><br><span class="line">data = pd.read_excel(file_path, engine=<span class="string">&#x27;openpyxl&#x27;</span>)[:<span class="number">50</span>]</span><br><span class="line">data</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.schema <span class="keyword">import</span> Document</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐行处理数据并创建Document对象</span></span><br><span class="line">documents = []</span><br><span class="line"><span class="keyword">for</span> index, row <span class="keyword">in</span> data.iterrows():</span><br><span class="line">    title = row[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">    content = row[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">    combined_text = <span class="string">f&quot;<span class="subst">&#123;title&#125;</span>\n<span class="subst">&#123;content&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建Document对象</span></span><br><span class="line">    document = Document(page_content=combined_text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将Document对象添加到列表中</span></span><br><span class="line">    documents.append(document)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在，documents列表包含了所有的Document对象，可以用于后续的处理</span></span><br><span class="line">documents[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.embeddings <span class="keyword">import</span> HuggingFaceEmbeddings</span><br><span class="line"><span class="keyword">from</span> langchain.vectorstores <span class="keyword">import</span> FAISS</span><br><span class="line"></span><br><span class="line">embeddings = HuggingFaceEmbeddings()</span><br><span class="line">db = FAISS.from_documents(documents, embeddings)</span><br><span class="line">query = <span class="string">&quot;双11广告我应该怎么打？&quot;</span></span><br><span class="line">docs = db.similarity_search(query)</span><br><span class="line">docs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个 similarity_score_threshold Retriever</span></span><br><span class="line">retriever = db.as_retriever(</span><br><span class="line">    search_type=<span class="string">&quot;similarity_score_threshold&quot;</span>,</span><br><span class="line">    search_kwargs=&#123;<span class="string">&quot;score_threshold&quot;</span>: <span class="number">0.8</span>&#125;</span><br><span class="line">)</span><br><span class="line">docs = retriever.get_relevant_documents(<span class="string">&quot;苏宁618&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:</span><br><span class="line">    <span class="built_in">print</span>(doc.page_content + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储</span></span><br><span class="line">db.save_local(<span class="string">&quot;real_estates_sale&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载</span></span><br><span class="line">db = FAISS.load_local(<span class="string">&quot;/content/real_estates_sale&quot;</span>, embeddings, allow_dangerous_deserialization=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.chains <span class="keyword">import</span> create_retrieval_chain</span><br><span class="line"><span class="keyword">from</span> langchain.chains.combine_documents <span class="keyword">import</span> create_stuff_documents_chain</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_community.chat_models <span class="keyword">import</span> ChatZhipuAI</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">llm = ChatOpenAI(</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DASHSCOPE_API_KEY&quot;</span>),</span><br><span class="line">    base_url=<span class="string">&quot;https://dashscope.aliyuncs.com/compatible-mode/v1&quot;</span>,</span><br><span class="line">    model=<span class="string">&quot;qwen-plus&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">system_prompt = (</span><br><span class="line">    <span class="string">&quot;Use the given context to answer the question. &quot;</span></span><br><span class="line">    <span class="string">&quot;If you don&#x27;t know the answer, say you don&#x27;t know. &quot;</span></span><br><span class="line">    <span class="string">&quot;Use three sentence maximum and keep the answer concise. &quot;</span></span><br><span class="line">    <span class="string">&quot;Context: &#123;context&#125;&quot;</span></span><br><span class="line">)</span><br><span class="line">prompt = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (<span class="string">&quot;system&quot;</span>, system_prompt),</span><br><span class="line">        (<span class="string">&quot;human&quot;</span>, <span class="string">&quot;&#123;input&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">question_answer_chain = create_stuff_documents_chain(llm, prompt)</span><br><span class="line">chain = create_retrieval_chain(db.as_retriever(search_type=<span class="string">&quot;similarity_score_threshold&quot;</span>,</span><br><span class="line">                                                         search_kwargs=&#123;<span class="string">&quot;score_threshold&quot;</span>: <span class="number">0.2</span>&#125;),</span><br><span class="line">                               question_answer_chain)</span><br><span class="line">chain.invoke(&#123;<span class="string">&quot;input&quot;</span>: query&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="技术对比"><a href="#技术对比" class="headerlink" title="技术对比"></a>技术对比</h2><table><thead><tr><th>维度</th><th>LangGraph系统</th><th>客服机器人</th></tr></thead><tbody><tr><td>架构特点</td><td>动态状态管理</td><td>静态知识检索</td></tr><tr><td>核心优势</td><td>复杂对话流处理</td><td>专业领域精准回答</td></tr><tr><td>响应时间</td><td>1-2s</td><td>&lt;500ms</td></tr><tr><td>适用场景</td><td>通用助手&#x2F;实时查询</td><td>垂直领域客服</td></tr><tr><td>扩展性</td><td>易添加新工具</td><td>需更新知识库</td></tr></tbody></table><h2 id="专业技能总结"><a href="#专业技能总结" class="headerlink" title="专业技能总结"></a>专业技能总结</h2><ol><li><p><strong>LLM应用开发</strong></p><ul><li>熟练掌握LangChain&#x2F;LangGraph生态</li><li>丰富的对话系统开发经验</li><li>多工具集成能力</li></ul></li><li><p><strong>检索增强生成</strong></p><ul><li>FAISS&#x2F;Chroma等向量数据库</li><li>RAG架构深度优化</li><li>语义搜索调优</li></ul></li><li><p><strong>性能优化</strong></p><ul><li>对话流延迟优化</li><li>检索精度提升</li><li>资源消耗控制</li></ul></li></ol><h2 id="项目演进路线"><a href="#项目演进路线" class="headerlink" title="项目演进路线"></a>项目演进路线</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[基础对话系统] --&gt; B[工具增强]</span><br><span class="line">B --&gt; C[状态管理]</span><br><span class="line">C --&gt; D[多模态扩展]</span><br><span class="line">D --&gt; E[自主Agent]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大模型应用开发框架 </category>
          
          <category> agent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LangGraph&amp;LangChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易笔试</title>
      <link href="/2025/08/10/%E7%BD%91%E6%98%93%E7%AC%94%E8%AF%95/"/>
      <url>/2025/08/10/%E7%BD%91%E6%98%93%E7%AC%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="算法笔记"><a href="#算法笔记" class="headerlink" title="算法笔记"></a>算法笔记</h1><h2 id="1-柱状图中最大的矩形（LeetCode-84）"><a href="#1-柱状图中最大的矩形（LeetCode-84）" class="headerlink" title="1. 柱状图中最大的矩形（LeetCode 84）"></a>1. 柱状图中最大的矩形（LeetCode 84）</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个数组 <code>heights</code>，表示每个柱子的高度（宽度均为 1），求直方图中能组成的最大矩形面积。</p><hr><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><ul><li><strong>核心思想</strong>：单调递增栈</li><li><strong>维护规则</strong>：栈中存储下标，栈内高度单调递增。</li><li>当遇到比栈顶柱子矮的柱子时，栈顶柱子右边界确定，可以计算面积。</li><li>为了处理所有柱子，最后加入一个高度为 0 的“哨兵”。</li></ul><hr><h3 id="面积计算公式"><a href="#面积计算公式" class="headerlink" title="面积计算公式"></a>面积计算公式</h3><ul><li>弹出的柱子高度：<code>h = heights[top]</code></li><li>右边界：当前索引 <code>i</code></li><li>左边界：弹出后栈顶元素索引 <code>stack.top()</code>，若为空则为 -1</li><li>宽度：<code>i - left - 1</code></li><li>面积：<code>h * width</code></li></ul><hr><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">largestRectangleArea</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; heights)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    heights.<span class="built_in">push_back</span>(<span class="number">0</span>); <span class="comment">// 哨兵</span></span><br><span class="line">    <span class="type">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)heights.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; heights[i] &lt; heights[stk.<span class="built_in">top</span>()]) &#123;</span><br><span class="line">            <span class="type">int</span> h = heights[stk.<span class="built_in">top</span>()];</span><br><span class="line">            stk.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> left = stk.<span class="built_in">empty</span>() ? <span class="number">-1</span> : stk.<span class="built_in">top</span>();</span><br><span class="line">            <span class="type">int</span> width = i - left - <span class="number">1</span>;</span><br><span class="line">            maxArea = <span class="built_in">max</span>(maxArea, h * width);</span><br><span class="line">        &#125;</span><br><span class="line">        stk.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; heights = &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最大矩形面积: &quot;</span> &lt;&lt; <span class="built_in">largestRectangleArea</span>(heights) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 复杂度分析</span><br><span class="line"></span><br><span class="line">* 时间复杂度：<span class="built_in">O</span>(n)，每个元素最多入栈出栈一次。</span><br><span class="line">* 空间复杂度：<span class="built_in">O</span>(n)，栈空间。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## <span class="number">2.</span> 分割数组使最大子数组和最小（LeetCode <span class="number">410</span>）</span><br><span class="line"></span><br><span class="line">### 题目描述</span><br><span class="line"></span><br><span class="line">给定一个非负整数数组 `nums` 和整数 `k`，将数组分成 `k` 个连续子数组，使得最大子数组和尽可能小，返回该最小值。</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 思路分析</span><br><span class="line"></span><br><span class="line">* **二分答案 + 贪心判断**</span><br><span class="line">* **下界**：数组最大值（至少得放最大元素）</span><br><span class="line">* **上界**：数组所有元素之和（不拆分）</span><br><span class="line">* **判断函数**：贪心分组，当前子数组和超过 mid 就新开一组，统计是否 ≤ k</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">### 贪心可行性判断</span><br><span class="line"></span><br><span class="line">```<span class="function">cpp</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">canSplit</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> maxSum, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> currentSum = <span class="number">0</span>, count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentSum + num &lt;= maxSum) &#123;</span><br><span class="line">            currentSum += num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">            currentSum = num;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="C-实现-1"><a href="#C-实现-1" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">canSplit</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> maxSum, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> currentSum = <span class="number">0</span>, count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentSum + num &lt;= maxSum) &#123;</span><br><span class="line">            currentSum += num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">            currentSum = num;</span><br><span class="line">            <span class="keyword">if</span> (count &gt; k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">splitArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> left = *<span class="built_in">max_element</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    <span class="type">int</span> right = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ans = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">canSplit</span>(nums, mid, k)) &#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums = &#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">8</span>&#125;;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最小最大子数组和: &quot;</span> &lt;&lt; <span class="built_in">splitArray</span>(nums, k) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：O(n log S)，S 为数组和范围</li><li>空间复杂度：O(1)</li></ul><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><table><thead><tr><th>题目</th><th>核心思想</th><th>数据结构</th><th>时间复杂度</th><th>空间复杂度</th></tr></thead><tbody><tr><td>柱状图最大矩形</td><td>单调递增栈</td><td>栈</td><td>O(n)</td><td>O(n)</td></tr><tr><td>分割数组</td><td>二分+贪心</td><td>-</td><td>O(n log S)</td><td>O(1)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
          <category> 秋招笔试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 单调栈 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长回文子序列</title>
      <link href="/2025/08/07/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2025/08/07/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="最长回文子序列（Longest-Palindromic-Subsequence）"><a href="#最长回文子序列（Longest-Palindromic-Subsequence）" class="headerlink" title="最长回文子序列（Longest Palindromic Subsequence）"></a>最长回文子序列（Longest Palindromic Subsequence）</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个字符串 <code>s</code>，找到其中最长的回文子序列的长度。子序列不要求连续。</p><h2 id="动态规划解法"><a href="#动态规划解法" class="headerlink" title="动态规划解法"></a>动态规划解法</h2><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C++ 实现"></a>C++ 实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="comment">// DP表，dp[i][j]表示s[i..j]的最长回文子序列长度</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化：单个字符的回文长度为1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从长度为2的子序列开始计算</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n - len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">                dp[i][j] = dp[i<span class="number">+1</span>][j<span class="number">-1</span>] + <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">+1</span>][j], dp[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][n<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入一个字符串: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最长回文子序列的长度是: &quot;</span> &lt;&lt; <span class="built_in">longestPalindromeSubseq</span>(s) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li><strong>时间复杂度</strong>：O(n²)</li><li><strong>空间复杂度</strong>：O(n²)（可优化至O(n)）</li></ul><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><ol><li><strong>定义状态</strong>：<code>dp[i][j]</code> 表示字符串 <code>s</code> 从索引 <code>i</code> 到 <code>j</code> 的最长回文子序列长度。</li><li><strong>初始化</strong>：单个字符的回文长度为1，即 <code>dp[i][i] = 1</code>。</li><li><strong>状态转移</strong>：<ul><li>如果 <code>s[i] == s[j]</code>，则 <code>dp[i][j] = dp[i+1][j-1] + 2</code></li><li>否则，<code>dp[i][j] = max(dp[i+1][j], dp[i][j-1])</code></li></ul></li><li><strong>结果</strong>：<code>dp[0][n-1]</code> 即为整个字符串的最长回文子序列长度。</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><table><thead><tr><th>输入</th><th>输出</th><th>解释</th></tr></thead><tbody><tr><td><code>&quot;bbbab&quot;</code></td><td>4</td><td>最长回文子序列是 <code>&quot;bbbb&quot;</code></td></tr><tr><td><code>&quot;cbbd&quot;</code></td><td>2</td><td>最长回文子序列是 <code>&quot;bb&quot;</code></td></tr></tbody></table><blockquote><p><strong>注意</strong>：子序列不要求连续，这是与子串的主要区别。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kaffir_Lime</title>
      <link href="/2025/07/21/Kaffir-Lime/"/>
      <url>/2025/07/21/Kaffir-Lime/</url>
      
        <content type="html"><![CDATA[<h1 id="🍋-Kaffir-Lime（Makrut-Lime）全解析：风味独特的东南亚香料之王"><a href="#🍋-Kaffir-Lime（Makrut-Lime）全解析：风味独特的东南亚香料之王" class="headerlink" title="🍋 Kaffir Lime（Makrut Lime）全解析：风味独特的东南亚香料之王"></a>🍋 Kaffir Lime（Makrut Lime）全解析：风味独特的东南亚香料之王</h1><blockquote><p>原文参考：<a href="https://uscitrus.com/blogs/makrut-kaffir-lime-blog/what-is-a-kaffir-lime-why-should-you-use-it">What is a Kaffir Lime &amp; Why Should You Use It? – US Citrus</a></p></blockquote><hr><h2 id="🌿-什么是-Kaffir-Lime？"><a href="#🌿-什么是-Kaffir-Lime？" class="headerlink" title="🌿 什么是 Kaffir Lime？"></a>🌿 什么是 Kaffir Lime？</h2><p>Kaffir Lime（学名 <em>Citrus hystrix</em>，又称 Makrut Lime）是一种原产东南亚的柑橘类植物，以其浓郁芳香而广受喜爱。</p><ul><li><strong>外观特征</strong>：果实表皮粗糙、绿色、大小与柠檬相近。叶片呈“双叶”结构，是其标志性特征。</li><li><strong>别名说明</strong>：出于文化敏感性，“Makrut Lime”在近年逐渐取代“Kaffir Lime”作为推荐用法。</li></ul><hr><h2 id="🥬-可食用部位及用途详解"><a href="#🥬-可食用部位及用途详解" class="headerlink" title="🥬 可食用部位及用途详解"></a>🥬 可食用部位及用途详解</h2><h3 id="🍃-1-叶子（Makrut-Leaves）"><a href="#🍃-1-叶子（Makrut-Leaves）" class="headerlink" title="🍃 1. 叶子（Makrut Leaves）"></a>🍃 1. 叶子（Makrut Leaves）</h3><ul><li>最常见的使用方式，味道芳香清新。</li><li>广泛用于<strong>泰国、越南、印尼等地</strong>的汤、咖喱和酱料中。</li><li>烹饪建议：整片使用，煮后取出，不建议切碎生食。</li></ul><h3 id="🍋-2-果皮（Zest）"><a href="#🍋-2-果皮（Zest）" class="headerlink" title="🍋 2. 果皮（Zest）"></a>🍋 2. 果皮（Zest）</h3><ul><li>香味浓郁，用于调味酱、咖喱、甚至朗姆酒中。</li><li>果皮中提取的<strong>精油</strong>用于香水、洗护用品和芳疗产品。</li></ul><h3 id="💧-3-果汁"><a href="#💧-3-果汁" class="headerlink" title="💧 3. 果汁"></a>💧 3. 果汁</h3><ul><li>味道酸涩，常用于传统草药或宗教清洁仪式。</li><li>有一定的抗菌和清洁作用，民间用来治疗皮肤问题。</li></ul><hr><h2 id="🌱-为什么你应该使用-Kaffir-Lime？"><a href="#🌱-为什么你应该使用-Kaffir-Lime？" class="headerlink" title="🌱 为什么你应该使用 Kaffir Lime？"></a>🌱 为什么你应该使用 Kaffir Lime？</h2><ul><li>✅ <strong>香气层次丰富</strong>：带有柠檬、香茅和青柠的混合香味，瞬间提升菜肴风味。</li><li>✅ <strong>健康益处</strong>：<ul><li>缓解消化不良、胃部胀气</li><li>精油具有镇静、提神、抗焦虑作用</li><li>某些部位含抗氧化物质，有助抗炎</li></ul></li><li>✅ <strong>保存便利</strong>：<ul><li>叶片可冷冻或干燥处理，适合长期保存。</li></ul></li></ul><hr><h2 id="⚠️-使用注意事项"><a href="#⚠️-使用注意事项" class="headerlink" title="⚠️ 使用注意事项"></a>⚠️ 使用注意事项</h2><ul><li><strong>果皮和果汁中含呋喃香豆素（furanocoumarins）</strong>，对部分人群可能引起<strong>光敏性皮炎</strong>。</li><li>使用后避免直接暴露在强烈阳光下。</li></ul><hr><h2 id="🌍-在哪能买到？"><a href="#🌍-在哪能买到？" class="headerlink" title="🌍 在哪能买到？"></a>🌍 在哪能买到？</h2><ul><li>新鲜叶片：亚洲市场、生鲜店</li><li>干叶&#x2F;冷冻叶：电商平台或东南亚进口商</li><li>精油：芳疗品牌、自然护肤品渠道</li></ul><hr><h2 id="📌-小贴士：如何保存？"><a href="#📌-小贴士：如何保存？" class="headerlink" title="📌 小贴士：如何保存？"></a>📌 小贴士：如何保存？</h2><table><thead><tr><th>形式</th><th>保存方式</th><th>建议使用周期</th></tr></thead><tbody><tr><td>鲜叶</td><td>冷藏或冷冻</td><td>2 周（冷藏）&#x2F;3-6 月（冷冻）</td></tr><tr><td>干叶</td><td>密封干燥存放</td><td>6-12 月</td></tr><tr><td>果皮</td><td>冷冻&#x2F;干燥&#x2F;研粉</td><td>视处理方式而定</td></tr></tbody></table><hr><h2 id="🔚-总结"><a href="#🔚-总结" class="headerlink" title="🔚 总结"></a>🔚 总结</h2><p>Kaffir Lime 是一种不可多得的复合型香料资源，其芳香与功能性完美融合。无论你是东南亚菜的爱好者，还是追求健康天然生活方式的人，Makrut Lime 都值得一试！</p><hr><blockquote><p>📖 推荐延伸阅读：  </p><ul><li><a href="https://en.wikipedia.org/wiki/Kaffir_lime">Wikipedia: Makrut Lime</a>  </li><li><a href="https://uscitrus.com/blogs/makrut-kaffir-lime-blog/what-is-a-kaffir-lime-why-should-you-use-it">US Citrus 原文博客</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 世界风情 </category>
          
          <category> 饮食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 东南亚 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepseek微调篇</title>
      <link href="/2025/02/27/deepseek%E5%BE%AE%E8%B0%83%E7%AF%87/"/>
      <url>/2025/02/27/deepseek%E5%BE%AE%E8%B0%83%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="如何把你的-DeePseek-R1-微调为某个领域的专家"><a href="#如何把你的-DeePseek-R1-微调为某个领域的专家" class="headerlink" title="如何把你的 DeePseek-R1 微调为某个领域的专家"></a>如何把你的 DeePseek-R1 微调为某个领域的专家</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>DeePseek-R1是一款强大的语言模型，通过适当的微调，可以使其在特定领域内表现得更为专业和准确。本指南将带你了解如何针对特定领域对DeePseek-R1进行微调。 </p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>确保你已经安装了必要的软件包，并且有足够的硬件资源（如GPU）来训练模型。此外，获取DeePseek-R1的基础模型以及相关的开发工具。 </p><h2 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h2><p>选择与目标领域相关的高质量文本数据集。这些数据应涵盖该领域的关键概念、术语和最新进展。可以从公开的数据源下载，或根据需要创建自己的数据集。 </p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>对收集到的数据进行清理和格式化。这包括去除无关信息、修正错误、统一格式等。同时，还需要将文本转换成模型可接受的输入形式。 </p><h2 id="微调过程"><a href="#微调过程" class="headerlink" title="微调过程"></a>微调过程</h2><ol><li><strong>加载基础模型</strong>：从官方渠道加载DeePseek-R1的基础版本。 </li><li><strong>配置参数</strong>：根据任务需求调整模型参数，比如学习率、批量大小等。 </li><li><strong>训练模型</strong>：使用准备好的数据集对模型进行微调。期间需密切监控损失函数的变化情况。</li><li><strong>保存模型</strong>：当达到满意的性能水平时，保存微调后的模型。</li></ol><h2 id="评估与优化"><a href="#评估与优化" class="headerlink" title="评估与优化"></a>评估与优化</h2><p>利用测试集评估模型性能，关注准确率、召回率等关键指标。基于评估结果进一步调整模型参数或扩大训练数据量以优化性能</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>完成微调并优化后，就可以将模型部署到实际应用场景中。确保有良好的用户界面和反馈机制以便持续改进模型。</p><p>参考：<a href="https://www.bilibili.com/video/BV1s2AUe2EBq/?spm_id_from=333.1007.tianma.2-3-6.click&vd_source=d4af111fd0a19b28839780e28567c6d5">如何把你的 DeePseek-R1 微调为某个领域的专家？</a></p>]]></content>
      
      
      <categories>
          
          <category> 好玩的东西 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepseek </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 20250226</title>
      <link href="/2025/02/26/leetcode-20250226/"/>
      <url>/2025/02/26/leetcode-20250226/</url>
      
        <content type="html"><![CDATA[<h1 id="监控二叉树"><a href="#监控二叉树" class="headerlink" title="监控二叉树"></a><a href="https://leetcode.cn/problems/binary-tree-cameras/">监控二叉树</a></h1><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minCameraCover</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(root, sum);</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;val == <span class="number">0</span>) sum++;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(TreeNode* node, <span class="type">int</span>&amp; sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(node-&gt;left, sum);</span><br><span class="line">        <span class="built_in">dfs</span>(node-&gt;right, sum);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ((node-&gt;left &amp;&amp; !node-&gt;left-&gt;left &amp;&amp; !node-&gt;left-&gt;right) || (node-&gt;right &amp;&amp; !node-&gt;right-&gt;left &amp;&amp; !node-&gt;right-&gt;right)) &#123;</span><br><span class="line">            node-&gt;val = <span class="number">2</span>;</span><br><span class="line">            sum++; <span class="comment">// 有叶子节点 必放</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left &amp;&amp; node-&gt;left-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">                node-&gt;val = <span class="number">2</span>;</span><br><span class="line">                sum++;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;right &amp;&amp; node-&gt;right-&gt;val == <span class="number">0</span>) &#123;</span><br><span class="line">                node-&gt;val = <span class="number">2</span>;</span><br><span class="line">                sum++;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 没有叶子节点 但是存在子节点的value为0 放</span></span><br><span class="line">            <span class="keyword">if</span> (node-&gt;left &amp;&amp; node-&gt;left-&gt;val == <span class="number">2</span>) &#123;</span><br><span class="line">                node-&gt;val = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;right &amp;&amp; node-&gt;right-&gt;val == <span class="number">2</span>) &#123;</span><br><span class="line">                node-&gt;val = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路（有点难，wa了好多次）：</p><ul><li><strong>贪心&#x2F;模拟</strong>：初始节点值为0  放摄像头的节点值为2 被监控到的节点值(不包括放置的节点)为1<ul><li>在叶子节点的父亲上放摄像头</li><li>如果子节点出现0 就是没有被监控到 则在当前节点放摄像头</li><li>如果子节点出现2 则当前节点被监控到 设置值为1</li></ul></li></ul><h1 id="单调递增的数字"><a href="#单调递增的数字" class="headerlink" title="单调递增的数字"></a><a href="https://leetcode.cn/problems/monotone-increasing-digits/">单调递增的数字</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">monotoneIncreasingDigits</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">10</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            a[k++] = n % <span class="number">10</span>;</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> l = i - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> (l &gt;= <span class="number">0</span>) a[l--] = <span class="number">9</span>;</span><br><span class="line">                a[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        k--;</span><br><span class="line">        <span class="keyword">while</span> (k &gt;= <span class="number">0</span> &amp;&amp; a[k] == <span class="number">0</span>) k--; </span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = k; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            ans *= <span class="number">10</span>;</span><br><span class="line">            ans += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>贪心&#x2F;模拟：设置前面的数字为a，后面的为b <ul><li>因为整体要保持单调递增（a&lt;&#x3D;b）</li><li>则反向遍历，若b&lt;a 则a为9，b–，循环往复，<strong>注意一点 当出现b&lt;a的时候 a以及a后面的数字均设置为9</strong></li></ul></li></ul><h1 id="合并区间"><a href="#合并区间" class="headerlink" title="合并区间"></a><a href="https://leetcode.cn/problems/merge-intervals/">合并区间</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">merge</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="type">int</span> n = intervals.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> l = intervals[<span class="number">0</span>][<span class="number">0</span>], r = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &lt;= r) &#123; <span class="comment">// 左端点小于右边界</span></span><br><span class="line">                r = <span class="built_in">max</span>(intervals[i][<span class="number">1</span>], r);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">                l = intervals[i][<span class="number">0</span>];</span><br><span class="line">                r = intervals[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>贪心：这类区间题做法挺类似的  对区间数组排序 左端点小的在前面 左端点一样的 右端点小的在前面<ul><li>要求合并所有重叠的区间，那么就是每次遇到重叠的区间 就更新右端点（取大的）</li><li>直到当前区间不重叠 则记录上一个重叠的区间，循环往复</li><li><strong>注意最后一个区间要加入到记录中，因为它不会进入else条件了</strong></li></ul></li></ul><h1 id="划分字母区间"><a href="#划分字母区间" class="headerlink" title="划分字母区间"></a><a href="https://leetcode.cn/problems/partition-labels/">划分字母区间</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">partitionLabels</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> a[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) a[s[i] - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> l = i;</span><br><span class="line">            <span class="type">int</span> k = a[s[i] - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">while</span> (i &lt;= k) &#123;</span><br><span class="line">                k = <span class="built_in">max</span>(k, a[s[i] - <span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">            res.<span class="built_in">push_back</span>(k - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li><strong>贪心&#x2F;滑窗</strong><ul><li>从左往右遍历，找到当前点出现的最远点的位置（初始化第一个窗口大小后不断更新）</li><li>直到没有更大的 则找到一个分割区间，循环往复</li></ul></li></ul><h1 id="无重叠区间"><a href="#无重叠区间" class="headerlink" title="无重叠区间"></a><a href="https://leetcode.cn/problems/non-overlapping-intervals/">无重叠区间</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">eraseOverlapIntervals</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; intervals)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = intervals.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(intervals.<span class="built_in">begin</span>(), intervals.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> r = intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &lt; r) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">if</span> (r &gt;= intervals[i][<span class="number">1</span>]) &#123;</span><br><span class="line">                    r = intervals[i][<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> r = intervals[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>贪心：区间按照左端点小的排序<ul><li>要求删除最少的区间 使得剩下的区间不相交</li><li>假设两个区间重叠 则必须要删除一个 那么删除哪个利益最大化，显然是删除右端点大的 因为要让后面的尽量不和右端点大的重叠（很好的想法，很nice）</li></ul></li></ul><h1 id="用最少数量的箭引爆气球"><a href="#用最少数量的箭引爆气球" class="headerlink" title="用最少数量的箭引爆气球"></a><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/">用最少数量的箭引爆气球</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMinArrowShots</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> n = points.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(points.<span class="built_in">begin</span>(), points.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> left = points[<span class="number">0</span>][<span class="number">0</span>], right = points[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (points[i][<span class="number">0</span>] &lt;= right) &#123;</span><br><span class="line">                right = <span class="built_in">min</span>(points[i][<span class="number">1</span>], right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                right = points[i][<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            left = points[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>贪心：<ul><li>要想一个箭射爆最多的气球，那么肯定要找到一个区间使得很多气球包含它</li><li>所以当出现重叠时 更新左端点为当前点的左端点，右端点为小的右端点</li><li>直到出现不重叠时，更新ans</li><li>注意这种思路下的ans初始化</li></ul></li></ul><h1 id="根据身高重建队列"><a href="#根据身高重建队列" class="headerlink" title="根据身高重建队列"></a><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/">根据身高重建队列</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="type">int</span> k;</span><br><span class="line">        Node* next;</span><br><span class="line">        <span class="built_in">Node</span>(<span class="type">int</span> x, <span class="type">int</span> y) : <span class="built_in">val</span>(x), <span class="built_in">k</span>(y), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">reconstructQueue</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; people) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="built_in">sort</span>(people.<span class="built_in">begin</span>(), people.<span class="built_in">end</span>(), cmp);</span><br><span class="line">        Node* root = <span class="keyword">new</span> <span class="built_in">Node</span>(people[<span class="number">0</span>][<span class="number">0</span>], people[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; people.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            Node* pre = root;</span><br><span class="line">            Node* cur = root;</span><br><span class="line">             <span class="comment">// 插入新节点</span></span><br><span class="line">            Node* node = <span class="keyword">new</span> <span class="built_in">Node</span>(people[i][<span class="number">0</span>], people[i][<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (people[i][<span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                node-&gt;next = root;</span><br><span class="line">                root = node;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur &amp;&amp; people[i][<span class="number">1</span>]--) &#123;</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = cur-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            pre-&gt;next = node;</span><br><span class="line">            node-&gt;next = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (root) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(&#123;root-&gt;val, root-&gt;k&#125;);</span><br><span class="line">            Node* temp = root;</span><br><span class="line">            root = root-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> temp; <span class="comment">// 释放内存</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] &gt; b[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">0</span>] == b[<span class="number">0</span>]) <span class="keyword">return</span> a[<span class="number">1</span>] &lt; b[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路（有点难）</p><ul><li>贪心？模拟<ul><li>要求重新整理数组 使得站位符合真实情况</li><li>处理高的人比处理矮的人要合理 想想高的人放完位置 矮的人怎么放都不会影响高的人</li><li>那么就先对数组排序 高的排前面</li><li>使用链表（数组更有效？暂时无法理解）比当前人高的数量就是他前面的人数量 能推导出数组下标</li><li>注意链表的创建与删除（释放内存）</li></ul></li></ul><h1 id="分发糖果"><a href="#分发糖果" class="headerlink" title="分发糖果"></a><a href="https://leetcode.cn/problems/candy/">分发糖果</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">candy</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;ratings)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = ratings.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n)</span></span>;</span><br><span class="line">        left[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            left[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt; ratings[i - <span class="number">1</span>]) left[i] = left[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = left[n - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ratings[i] &gt; ratings[i + <span class="number">1</span>]) left[i] = <span class="built_in">max</span>(left[i + <span class="number">1</span>] + <span class="number">1</span>, left[i]); </span><br><span class="line">            sum += left[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>贪心：<ul><li>假设一个孩子分数高于两边的孩子，那么一个孩子能分到的糖果取决于max(两边孩子的糖果数量)+1</li><li>所以前向遍历一次定下初步结果 后向遍历确定最终结果</li></ul></li></ul><h1 id="柠檬水找零"><a href="#柠檬水找零" class="headerlink" title="柠檬水找零"></a><a href="https://leetcode.cn/problems/lemonade-change/">柠檬水找零</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">lemonadeChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; bills)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = bills.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> five = <span class="number">0</span>, ten = <span class="number">0</span>, twenty = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bills[i] == <span class="number">5</span>) &#123;</span><br><span class="line">                five++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bills[i] == <span class="number">10</span>) &#123;</span><br><span class="line">                five--;</span><br><span class="line">                <span class="keyword">if</span> (five &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                ten++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ten &amp;&amp; five) &#123;</span><br><span class="line">                    ten--;</span><br><span class="line">                    five--;</span><br><span class="line">                    twenty++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (five &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                    five -= <span class="number">3</span>;</span><br><span class="line">                    twenty++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>经典的贪心<ul><li>显然5美元不需要找零</li><li>10美元需要5美元找零   20美元需要3*5或1*10+1*5</li><li>对于20美元优先使用10找，因为10只能用来找零20，而5是通用的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 20250223-1</title>
      <link href="/2025/02/23/leetcode-20250223-1/"/>
      <url>/2025/02/23/leetcode-20250223-1/</url>
      
        <content type="html"><![CDATA[<h1 id="分发饼干"><a href="#分发饼干" class="headerlink" title="分发饼干"></a><a href="https://leetcode.cn/problems/assign-cookies/">分发饼干</a></h1><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; g, vector&lt;<span class="type">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = g.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; s.<span class="built_in">size</span>() &amp;&amp; g[i] &gt; s[l]) l++;</span><br><span class="line">            <span class="keyword">if</span> (l != s.<span class="built_in">size</span>()) sum++, l++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>每个孩子只用它能满足的最小饼干数</li><li>优先满足所需饼干数小的孩子</li></ul><h1 id="摆动序列"><a href="#摆动序列" class="headerlink" title="摆动序列"></a><a href="https://leetcode.cn/problems/wiggle-subsequence/">摆动序列</a></h1><img src="/2025/02/23/leetcode-20250223-1/image-20250223123505277.png" class="" title="image-20250223123505277"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">wiggleMaxLength</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">size</span>() &lt;= <span class="number">1</span>) <span class="keyword">return</span> nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> curDiff = <span class="number">0</span>; <span class="comment">// 当前一对差值</span></span><br><span class="line">        <span class="type">int</span> preDiff = <span class="number">0</span>; <span class="comment">// 前一对差值</span></span><br><span class="line">        <span class="type">int</span> result = <span class="number">1</span>;  <span class="comment">// 记录峰值个数，序列默认序列最右边有一个峰值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            curDiff = nums[i + <span class="number">1</span>] - nums[i];</span><br><span class="line">            <span class="comment">// 出现峰值</span></span><br><span class="line">            <span class="keyword">if</span> ((preDiff &lt;= <span class="number">0</span> &amp;&amp; curDiff &gt; <span class="number">0</span>) || (preDiff &gt;= <span class="number">0</span> &amp;&amp; curDiff &lt; <span class="number">0</span>)) &#123;</span><br><span class="line">                result++;</span><br><span class="line">                preDiff = curDiff; <span class="comment">// 注意这里，只在摆动变化的时候更新prediff</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路（有点难）：</p><ul><li>找出现的所有的峰值（<a href="https://www.programmercarl.com/0376.%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html#%E6%80%9D%E8%B7%AF">代码随想录</a>）</li><li>在实际代码中，我们记录当前序列的上升下降趋势。每次加入一个新元素时，用新的上升下降趋势与之前对比，如果出现了「峰」或「谷」，答案加一，并更新当前序列的上升下降趋势。（<a href="https://leetcode.cn/problems/wiggle-subsequence/solutions/518296/bai-dong-xu-lie-by-leetcode-solution-yh2m/">leetcode</a>）</li></ul><h1 id="最大子数组和"><a href="#最大子数组和" class="headerlink" title="最大子数组和"></a><a href="https://leetcode.cn/problems/maximum-subarray/">最大子数组和</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> res = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (; r &lt; n; r++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ans &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                ans += nums[r];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = nums[r];</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">max</span>(res, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>要求是连续子数组，所以当之前的子序列和&lt;0的时候即可抛弃 从新的下标继续计算</li></ul><h1 id="买卖股票的最佳时机-II"><a href="#买卖股票的最佳时机-II" class="headerlink" title="买卖股票的最佳时机 II"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">买卖股票的最佳时机 II</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; prices[i] &gt;= prices[i - <span class="number">1</span>]) i++;</span><br><span class="line">            ans += prices[i - <span class="number">1</span>] - prices[l];</span><br><span class="line">            l = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>找连续上升区间 最低点买进 最高点卖出</li></ul><h1 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a><a href="https://leetcode.cn/problems/jump-game/">跳跃游戏</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canJump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;) &#123;</span><br><span class="line">            <span class="type">int</span> step = nums[i];</span><br><span class="line">            <span class="comment">// cout &lt;&lt; step &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span> (i + step &gt;= n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!step) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">int</span> _ = <span class="number">-1</span>;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="type">int</span> id = i;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; step--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + i &gt;= _) &#123;</span><br><span class="line">                    _ = nums[i] + i;</span><br><span class="line">                    id = i;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span> (_ &gt;= n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            i = id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>仅需判断是否能跳到最后点，每次都选当前能跳到的范围内向右跳的最远的点 判断是否能达到终点</li><li>注意跳到非终点的0就只能返回false</li></ul><h1 id="跳跃游戏-II"><a href="#跳跃游戏-II" class="headerlink" title="跳跃游戏 II"></a><a href="https://leetcode.cn/problems/jump-game-ii/">跳跃游戏 II</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> sum;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>;) &#123;</span><br><span class="line">            <span class="type">int</span> step = nums[i];</span><br><span class="line">            <span class="keyword">if</span> (i + step &gt;= n - <span class="number">1</span>) <span class="keyword">return</span> sum + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> _ = <span class="number">-1</span>;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="type">int</span> id = i;</span><br><span class="line">            sum++;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; n &amp;&amp; step--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + i &gt;= _) &#123;</span><br><span class="line">                    _ = nums[i] + i;</span><br><span class="line">                    id = i;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">if</span> (_ &gt;= n - <span class="number">1</span>) <span class="keyword">return</span> sum + <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            i = id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路：</p><ul><li>要求跳最少次，思路同上，每次选跳的最远（说明此时没到终点，需要向右跳一次），选最远的过程相当于从当前点跳到新的点，再从新的点开始跳 所以返回sum+1</li><li>当前点特判亦是如此（返回sum+1）</li></ul><h1 id="加油站"><a href="#加油站" class="headerlink" title="加油站"></a><a href="https://leetcode.cn/problems/gas-station/">加油站</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># 解法一 滑动窗口</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = gas.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) total += gas[i] - cost[i];</span><br><span class="line">        <span class="keyword">if</span> (total &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (r &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> rest = gas[r] - cost[r];</span><br><span class="line">            ans += rest;</span><br><span class="line">            <span class="keyword">if</span>(ans &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                ans -= gas[l] - cost[l];</span><br><span class="line">                <span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">                    l++;</span><br><span class="line">                    ans -= rest;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    r++;</span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                r++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; n &amp;&amp; gas[l] - cost[l] &lt; <span class="number">0</span>) l++; <span class="comment">// 起点首相要求&gt;=0</span></span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"># 解法二 贪心</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">canCompleteCircuit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; gas, vector&lt;<span class="type">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> curSum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> totalSum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; gas.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            curSum += gas[i] - cost[i];</span><br><span class="line">            totalSum += gas[i] - cost[i];</span><br><span class="line">            <span class="keyword">if</span> (curSum &lt; <span class="number">0</span>) &#123;   <span class="comment">// 当前累加rest[i]和 curSum一旦小于0</span></span><br><span class="line">                start = i + <span class="number">1</span>;  <span class="comment">// 起始位置更新为i+1</span></span><br><span class="line">                curSum = <span class="number">0</span>;     <span class="comment">// curSum从0开始</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (totalSum &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 说明怎么走都不可能跑一圈了</span></span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>思路（难）：</p><ul><li>首先可以确定 gas-cost的和&lt;0 则比不可能绕一圈</li><li>反之，假设该点下标为k，那么，以k点将数组一分为2 其点左边的和&lt;0 右边的和&gt;0</li><li>所以贪心的思路是从0开始向右计算累加和：&lt;0 则从新的点重新计算 直到找到一个点开始直至末尾的和&gt;0</li><li>滑动窗口的思想类似，只需要保持窗口内的和始终&gt;0 （其实必然也会到最后），但是要注意起点首项必然&gt;0</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 20250223</title>
      <link href="/2025/02/23/leetcode-20250223/"/>
      <url>/2025/02/23/leetcode-20250223/</url>
      
        <content type="html"><![CDATA[<h1 id="N-皇后"><a href="#N-皇后" class="headerlink" title="N 皇后"></a><a href="http://localhost:4000/admin/#/posts/">N 皇后</a></h1><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">solveNQueens</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;string&gt;&gt; res;</span><br><span class="line">        <span class="type">int</span> col[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> cha[<span class="number">34</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        vector&lt;string&gt; path;</span><br><span class="line">        <span class="built_in">bt</span>(res, path, n, <span class="number">0</span>, col, cha);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bt</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; res, vector&lt;string&gt;&amp; path, <span class="type">int</span> n, <span class="type">int</span> line, <span class="type">int</span>* col, <span class="type">int</span>* cha)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (line == n) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!col[i] &amp;&amp; !cha[line - i + <span class="number">8</span>] &amp;&amp; !cha[line + i + <span class="number">16</span>]) &#123;</span><br><span class="line">                col[i] = <span class="number">1</span>;</span><br><span class="line">                cha[line - i + <span class="number">8</span>] = <span class="number">1</span>;</span><br><span class="line">                cha[line + i + <span class="number">16</span>] = <span class="number">1</span>;</span><br><span class="line">                string _(n, <span class="string">&#x27;.&#x27;</span>);     </span><br><span class="line">                _[i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                path.<span class="built_in">push_back</span>(_);</span><br><span class="line">                <span class="built_in">bt</span>(res, path, n, line + <span class="number">1</span>, col, cha);</span><br><span class="line">                col[i] = <span class="number">0</span>;</span><br><span class="line">                cha[line - i + <span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">                cha[line + i + <span class="number">16</span>] = <span class="number">0</span>;</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意事项</p><ul><li>使用数组记录当前皇后所在列为1 斜线上也为1</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 20250220</title>
      <link href="/2025/02/20/leetcode-20250220/"/>
      <url>/2025/02/20/leetcode-20250220/</url>
      
        <content type="html"><![CDATA[<h1 id="重新安排行程"><a href="#重新安排行程" class="headerlink" title="重新安排行程"></a><a href="https://leetcode.cn/problems/reconstruct-itinerary/description/">重新安排行程</a></h1><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findItinerary</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; tickets)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = tickets.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;string&gt; path;</span><br><span class="line">        unordered_map&lt;string, <span class="type">int</span>&gt; used;</span><br><span class="line">        unordered_map&lt;string, vector&lt;string&gt;&gt; up;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (up.<span class="built_in">find</span>(tickets[i][<span class="number">0</span>]) == up.<span class="built_in">end</span>()) up[tickets[i][<span class="number">0</span>]] = &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (used.<span class="built_in">find</span>(tickets[i][<span class="number">0</span>] + tickets[i][<span class="number">1</span>]) != used.<span class="built_in">end</span>()) used[tickets[i][<span class="number">0</span>] + tickets[i][<span class="number">1</span>]]++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                used[tickets[i][<span class="number">0</span>] + tickets[i][<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">                up[tickets[i][<span class="number">0</span>]].<span class="built_in">push_back</span>(tickets[i][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; pair : up) &#123;</span><br><span class="line">            <span class="built_in">sort</span>(pair.second.<span class="built_in">begin</span>(), pair.second.<span class="built_in">end</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        path.<span class="built_in">push_back</span>(<span class="string">&quot;JFK&quot;</span>);</span><br><span class="line">        <span class="built_in">bt</span>(up, path, used, n, <span class="string">&quot;JFK&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bt</span><span class="params">(unordered_map&lt;string, vector&lt;string&gt;&gt; up, vector&lt;string&gt;&amp; path, unordered_map&lt;string, <span class="type">int</span>&gt;&amp; used, <span class="type">int</span> n, string from)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == n + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; up[from].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            string k = from + up[from][i];</span><br><span class="line">            <span class="keyword">if</span> (used[k] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                path.<span class="built_in">push_back</span>(up[from][i]);</span><br><span class="line">                --used[k];</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">bt</span>(up, path, used, n, up[from][i])) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">                ++used[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>相同航班只存一次</li><li>返回bool比全局变量更快（不知道为什么）</li></ul><h1 id="非递减子序列"><a href="#非递减子序列" class="headerlink" title="非递减子序列"></a><a href="https://leetcode.cn/problems/non-decreasing-subsequences/description/">非递减子序列</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">findSubsequences</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">bt</span>(res, path, nums, start);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bt</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; res, vector&lt;<span class="type">int</span>&gt;&amp; path, vector&lt;<span class="type">int</span>&gt; nums, <span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (st.<span class="built_in">find</span>(nums[i]) != st.<span class="built_in">end</span>() || (path.<span class="built_in">size</span>() &amp;&amp; path.<span class="built_in">back</span>() &gt; nums[i])) <span class="keyword">continue</span>;</span><br><span class="line">            path.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">            st.<span class="built_in">insert</span>(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (path.<span class="built_in">size</span>() &gt; <span class="number">1</span>) res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="built_in">bt</span>(res, path, nums, i + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>在<strong>同一层</strong>使用unordered_set处理相同的数字</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode 20250219</title>
      <link href="/2025/02/19/leetcode-20250219/"/>
      <url>/2025/02/19/leetcode-20250219/</url>
      
        <content type="html"><![CDATA[<h1 id="组合总和"><a href="#组合总和" class="headerlink" title="组合总和"></a><a href="https://leetcode.cn/problems/combination-sum/">组合总和</a></h1><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; can;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">bt</span>(res, can, target, sum, candidates, start);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bt</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; res, vector&lt;<span class="type">int</span>&gt;&amp; can, <span class="type">int</span> target, <span class="type">int</span> sum, vector&lt;<span class="type">int</span>&gt; candidates, <span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; target) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// if (len(res) == 150) return;</span></span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(can);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; candidates.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            can.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">bt</span>(res, can, target, sum, candidates, i);</span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">            can.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>可以取重复 start&#x3D;i</li><li>剪枝判断可以放在for循环</li></ul><h1 id="组合总和Ⅱ"><a href="#组合总和Ⅱ" class="headerlink" title="组合总和Ⅱ"></a><a href="https://leetcode.cn/problems/combination-sum-ii/">组合总和Ⅱ</a></h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum2</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; can;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(candidates.<span class="built_in">begin</span>(), candidates.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">bt</span>(res, can, target, sum, candidates, start);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bt</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; res, vector&lt;<span class="type">int</span>&gt;&amp; can, <span class="type">int</span> target, <span class="type">int</span> sum, vector&lt;<span class="type">int</span>&gt; candidates, <span class="type">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; target) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// if (len(res) == 150) return;</span></span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(can);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; candidates.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != start &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            can.<span class="built_in">push_back</span>(candidates[i]);</span><br><span class="line">            <span class="built_in">bt</span>(res, can, target, sum, candidates, i + <span class="number">1</span>);</span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">            can.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>先排序 for循环判断前一个是否相等去重（hard to think）</li><li>剪枝判断可以放在for循环</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Today bilibili nice comment</title>
      <link href="/2025/02/18/Today-bilibili-nice-comment/"/>
      <url>/2025/02/18/Today-bilibili-nice-comment/</url>
      
        <content type="html"><![CDATA[<h3 id="当铅云压境的天穹开始震颤，我竟在毁灭的预感里尝到隐秘的欢愉。或许该有一场海啸，将那些碎玻璃般的记忆冲散；该有地震将我的怯懦与偏执都埋进地层褶皱。我渴望被雷暴包裹，看雨幕像远古的经文覆盖人间，好让浸在泥沼里的日常，能在自然的恢宏里暂时漂浮。"><a href="#当铅云压境的天穹开始震颤，我竟在毁灭的预感里尝到隐秘的欢愉。或许该有一场海啸，将那些碎玻璃般的记忆冲散；该有地震将我的怯懦与偏执都埋进地层褶皱。我渴望被雷暴包裹，看雨幕像远古的经文覆盖人间，好让浸在泥沼里的日常，能在自然的恢宏里暂时漂浮。" class="headerlink" title="当铅云压境的天穹开始震颤，我竟在毁灭的预感里尝到隐秘的欢愉。或许该有一场海啸，将那些碎玻璃般的记忆冲散；该有地震将我的怯懦与偏执都埋进地层褶皱。我渴望被雷暴包裹，看雨幕像远古的经文覆盖人间，好让浸在泥沼里的日常，能在自然的恢宏里暂时漂浮。"></a>当铅云压境的天穹开始震颤，<span id="more"></span>我竟在毁灭的预感里尝到隐秘的欢愉。或许该有一场海啸，将那些碎玻璃般的记忆冲散；该有地震将我的怯懦与偏执都埋进地层褶皱。我渴望被雷暴包裹，看雨幕像远古的经文覆盖人间，好让浸在泥沼里的日常，能在自然的恢宏里暂时漂浮。</h3><h3 id="闪电劈开城市时，我忽然明白：这焦渴并非求死，不过是借天地壮阔，来确认自己仍在呼吸。"><a href="#闪电劈开城市时，我忽然明白：这焦渴并非求死，不过是借天地壮阔，来确认自己仍在呼吸。" class="headerlink" title="闪电劈开城市时，我忽然明白：这焦渴并非求死，不过是借天地壮阔，来确认自己仍在呼吸。"></a>闪电劈开城市时，我忽然明白：这焦渴并非求死，不过是借天地壮阔，来确认自己仍在呼吸。</h3><h4 id="引自-B站用户-睡觉的狗头人"><a href="#引自-B站用户-睡觉的狗头人" class="headerlink" title="引自 B站用户 睡觉的狗头人"></a>引自 B站用户 <a href="https://www.bilibili.com/video/BV1jzKnebEeM/?spm_id_from=333.788.top_right_bar_window_history.content.click&vd_source=d4af111fd0a19b28839780e28567c6d5">睡觉的狗头人</a></h4>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bilibili </tag>
            
            <tag> nice sentences </tag>
            
            <tag> mark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/02/18/hello-world/"/>
      <url>/2025/02/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
